/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/": {
		get: {
			responses: {
				/** OK */
				200: unknown;
			};
		};
	};
	"/comments": {
		get: {
			parameters: {
				query: {
					id?: parameters["rowFilter.comments.id"];
					postId?: parameters["rowFilter.comments.postId"];
					user?: parameters["rowFilter.comments.user"];
					postedAt?: parameters["rowFilter.comments.postedAt"];
					comment?: parameters["rowFilter.comments.comment"];
					parentId?: parameters["rowFilter.comments.parentId"];
					/** Filtering Columns */
					select?: parameters["select"];
					/** Ordering */
					order?: parameters["order"];
					/** Limiting and Pagination */
					offset?: parameters["offset"];
					/** Limiting and Pagination */
					limit?: parameters["limit"];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters["range"];
					/** Limiting and Pagination */
					"Range-Unit"?: parameters["rangeUnit"];
					/** Preference */
					Prefer?: parameters["preferCount"];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions["comments"][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** comments */
					comments?: definitions["comments"];
				};
				query: {
					/** Filtering Columns */
					select?: parameters["select"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					id?: parameters["rowFilter.comments.id"];
					postId?: parameters["rowFilter.comments.postId"];
					user?: parameters["rowFilter.comments.user"];
					postedAt?: parameters["rowFilter.comments.postedAt"];
					comment?: parameters["rowFilter.comments.comment"];
					parentId?: parameters["rowFilter.comments.parentId"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					id?: parameters["rowFilter.comments.id"];
					postId?: parameters["rowFilter.comments.postId"];
					user?: parameters["rowFilter.comments.user"];
					postedAt?: parameters["rowFilter.comments.postedAt"];
					comment?: parameters["rowFilter.comments.comment"];
					parentId?: parameters["rowFilter.comments.parentId"];
				};
				body: {
					/** comments */
					comments?: definitions["comments"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	"/followers": {
		get: {
			parameters: {
				query: {
					id?: parameters["rowFilter.followers.id"];
					follower?: parameters["rowFilter.followers.follower"];
					following?: parameters["rowFilter.followers.following"];
					/** Filtering Columns */
					select?: parameters["select"];
					/** Ordering */
					order?: parameters["order"];
					/** Limiting and Pagination */
					offset?: parameters["offset"];
					/** Limiting and Pagination */
					limit?: parameters["limit"];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters["range"];
					/** Limiting and Pagination */
					"Range-Unit"?: parameters["rangeUnit"];
					/** Preference */
					Prefer?: parameters["preferCount"];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions["followers"][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** followers */
					followers?: definitions["followers"];
				};
				query: {
					/** Filtering Columns */
					select?: parameters["select"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					id?: parameters["rowFilter.followers.id"];
					follower?: parameters["rowFilter.followers.follower"];
					following?: parameters["rowFilter.followers.following"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					id?: parameters["rowFilter.followers.id"];
					follower?: parameters["rowFilter.followers.follower"];
					following?: parameters["rowFilter.followers.following"];
				};
				body: {
					/** followers */
					followers?: definitions["followers"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	"/likes": {
		get: {
			parameters: {
				query: {
					id?: parameters["rowFilter.likes.id"];
					postId?: parameters["rowFilter.likes.postId"];
					user?: parameters["rowFilter.likes.user"];
					/** Filtering Columns */
					select?: parameters["select"];
					/** Ordering */
					order?: parameters["order"];
					/** Limiting and Pagination */
					offset?: parameters["offset"];
					/** Limiting and Pagination */
					limit?: parameters["limit"];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters["range"];
					/** Limiting and Pagination */
					"Range-Unit"?: parameters["rangeUnit"];
					/** Preference */
					Prefer?: parameters["preferCount"];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions["likes"][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** likes */
					likes?: definitions["likes"];
				};
				query: {
					/** Filtering Columns */
					select?: parameters["select"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					id?: parameters["rowFilter.likes.id"];
					postId?: parameters["rowFilter.likes.postId"];
					user?: parameters["rowFilter.likes.user"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					id?: parameters["rowFilter.likes.id"];
					postId?: parameters["rowFilter.likes.postId"];
					user?: parameters["rowFilter.likes.user"];
				};
				body: {
					/** likes */
					likes?: definitions["likes"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	"/messages": {
		get: {
			parameters: {
				query: {
					messageId?: parameters["rowFilter.messages.messageId"];
					/** TEXT, IMAGE, POST, STORY, STORYREPLY */
					message_type?: parameters["rowFilter.messages.message_type"];
					text?: parameters["rowFilter.messages.text"];
					postId?: parameters["rowFilter.messages.postId"];
					imageUrl?: parameters["rowFilter.messages.imageUrl"];
					sender?: parameters["rowFilter.messages.sender"];
					receiver?: parameters["rowFilter.messages.receiver"];
					received_at?: parameters["rowFilter.messages.received_at"];
					storyId?: parameters["rowFilter.messages.storyId"];
					/** Filtering Columns */
					select?: parameters["select"];
					/** Ordering */
					order?: parameters["order"];
					/** Limiting and Pagination */
					offset?: parameters["offset"];
					/** Limiting and Pagination */
					limit?: parameters["limit"];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters["range"];
					/** Limiting and Pagination */
					"Range-Unit"?: parameters["rangeUnit"];
					/** Preference */
					Prefer?: parameters["preferCount"];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions["messages"][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** messages */
					messages?: definitions["messages"];
				};
				query: {
					/** Filtering Columns */
					select?: parameters["select"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					messageId?: parameters["rowFilter.messages.messageId"];
					/** TEXT, IMAGE, POST, STORY, STORYREPLY */
					message_type?: parameters["rowFilter.messages.message_type"];
					text?: parameters["rowFilter.messages.text"];
					postId?: parameters["rowFilter.messages.postId"];
					imageUrl?: parameters["rowFilter.messages.imageUrl"];
					sender?: parameters["rowFilter.messages.sender"];
					receiver?: parameters["rowFilter.messages.receiver"];
					received_at?: parameters["rowFilter.messages.received_at"];
					storyId?: parameters["rowFilter.messages.storyId"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					messageId?: parameters["rowFilter.messages.messageId"];
					/** TEXT, IMAGE, POST, STORY, STORYREPLY */
					message_type?: parameters["rowFilter.messages.message_type"];
					text?: parameters["rowFilter.messages.text"];
					postId?: parameters["rowFilter.messages.postId"];
					imageUrl?: parameters["rowFilter.messages.imageUrl"];
					sender?: parameters["rowFilter.messages.sender"];
					receiver?: parameters["rowFilter.messages.receiver"];
					received_at?: parameters["rowFilter.messages.received_at"];
					storyId?: parameters["rowFilter.messages.storyId"];
				};
				body: {
					/** messages */
					messages?: definitions["messages"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	"/notifications": {
		get: {
			parameters: {
				query: {
					id?: parameters["rowFilter.notifications.id"];
					/** Type of Notification: COMMENT, LIKE, FOLLOW */
					type?: parameters["rowFilter.notifications.type"];
					/** Created On */
					createdOn?: parameters["rowFilter.notifications.createdOn"];
					/** User */
					toUser?: parameters["rowFilter.notifications.toUser"];
					byUser?: parameters["rowFilter.notifications.byUser"];
					/** Post */
					post?: parameters["rowFilter.notifications.post"];
					comment?: parameters["rowFilter.notifications.comment"];
					/** Filtering Columns */
					select?: parameters["select"];
					/** Ordering */
					order?: parameters["order"];
					/** Limiting and Pagination */
					offset?: parameters["offset"];
					/** Limiting and Pagination */
					limit?: parameters["limit"];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters["range"];
					/** Limiting and Pagination */
					"Range-Unit"?: parameters["rangeUnit"];
					/** Preference */
					Prefer?: parameters["preferCount"];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions["notifications"][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** notifications */
					notifications?: definitions["notifications"];
				};
				query: {
					/** Filtering Columns */
					select?: parameters["select"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					id?: parameters["rowFilter.notifications.id"];
					/** Type of Notification: COMMENT, LIKE, FOLLOW */
					type?: parameters["rowFilter.notifications.type"];
					/** Created On */
					createdOn?: parameters["rowFilter.notifications.createdOn"];
					/** User */
					toUser?: parameters["rowFilter.notifications.toUser"];
					byUser?: parameters["rowFilter.notifications.byUser"];
					/** Post */
					post?: parameters["rowFilter.notifications.post"];
					comment?: parameters["rowFilter.notifications.comment"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					id?: parameters["rowFilter.notifications.id"];
					/** Type of Notification: COMMENT, LIKE, FOLLOW */
					type?: parameters["rowFilter.notifications.type"];
					/** Created On */
					createdOn?: parameters["rowFilter.notifications.createdOn"];
					/** User */
					toUser?: parameters["rowFilter.notifications.toUser"];
					byUser?: parameters["rowFilter.notifications.byUser"];
					/** Post */
					post?: parameters["rowFilter.notifications.post"];
					comment?: parameters["rowFilter.notifications.comment"];
				};
				body: {
					/** notifications */
					notifications?: definitions["notifications"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	"/posts": {
		get: {
			parameters: {
				query: {
					postId?: parameters["rowFilter.posts.postId"];
					imageUrl?: parameters["rowFilter.posts.imageUrl"];
					user?: parameters["rowFilter.posts.user"];
					caption?: parameters["rowFilter.posts.caption"];
					postedAt?: parameters["rowFilter.posts.postedAt"];
					/** Filtering Columns */
					select?: parameters["select"];
					/** Ordering */
					order?: parameters["order"];
					/** Limiting and Pagination */
					offset?: parameters["offset"];
					/** Limiting and Pagination */
					limit?: parameters["limit"];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters["range"];
					/** Limiting and Pagination */
					"Range-Unit"?: parameters["rangeUnit"];
					/** Preference */
					Prefer?: parameters["preferCount"];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions["posts"][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** posts */
					posts?: definitions["posts"];
				};
				query: {
					/** Filtering Columns */
					select?: parameters["select"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					postId?: parameters["rowFilter.posts.postId"];
					imageUrl?: parameters["rowFilter.posts.imageUrl"];
					user?: parameters["rowFilter.posts.user"];
					caption?: parameters["rowFilter.posts.caption"];
					postedAt?: parameters["rowFilter.posts.postedAt"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					postId?: parameters["rowFilter.posts.postId"];
					imageUrl?: parameters["rowFilter.posts.imageUrl"];
					user?: parameters["rowFilter.posts.user"];
					caption?: parameters["rowFilter.posts.caption"];
					postedAt?: parameters["rowFilter.posts.postedAt"];
				};
				body: {
					/** posts */
					posts?: definitions["posts"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	"/stories": {
		get: {
			parameters: {
				query: {
					id?: parameters["rowFilter.stories.id"];
					/** Story Image URL */
					imageUrl?: parameters["rowFilter.stories.imageUrl"];
					/** User */
					user?: parameters["rowFilter.stories.user"];
					/** Posted At */
					postedAt?: parameters["rowFilter.stories.postedAt"];
					/** Filtering Columns */
					select?: parameters["select"];
					/** Ordering */
					order?: parameters["order"];
					/** Limiting and Pagination */
					offset?: parameters["offset"];
					/** Limiting and Pagination */
					limit?: parameters["limit"];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters["range"];
					/** Limiting and Pagination */
					"Range-Unit"?: parameters["rangeUnit"];
					/** Preference */
					Prefer?: parameters["preferCount"];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions["stories"][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** stories */
					stories?: definitions["stories"];
				};
				query: {
					/** Filtering Columns */
					select?: parameters["select"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					id?: parameters["rowFilter.stories.id"];
					/** Story Image URL */
					imageUrl?: parameters["rowFilter.stories.imageUrl"];
					/** User */
					user?: parameters["rowFilter.stories.user"];
					/** Posted At */
					postedAt?: parameters["rowFilter.stories.postedAt"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					id?: parameters["rowFilter.stories.id"];
					/** Story Image URL */
					imageUrl?: parameters["rowFilter.stories.imageUrl"];
					/** User */
					user?: parameters["rowFilter.stories.user"];
					/** Posted At */
					postedAt?: parameters["rowFilter.stories.postedAt"];
				};
				body: {
					/** stories */
					stories?: definitions["stories"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	"/storyviews": {
		get: {
			parameters: {
				query: {
					storyId?: parameters["rowFilter.storyviews.storyId"];
					id?: parameters["rowFilter.storyviews.id"];
					user?: parameters["rowFilter.storyviews.user"];
					/** Filtering Columns */
					select?: parameters["select"];
					/** Ordering */
					order?: parameters["order"];
					/** Limiting and Pagination */
					offset?: parameters["offset"];
					/** Limiting and Pagination */
					limit?: parameters["limit"];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters["range"];
					/** Limiting and Pagination */
					"Range-Unit"?: parameters["rangeUnit"];
					/** Preference */
					Prefer?: parameters["preferCount"];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions["storyviews"][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** storyviews */
					storyviews?: definitions["storyviews"];
				};
				query: {
					/** Filtering Columns */
					select?: parameters["select"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					storyId?: parameters["rowFilter.storyviews.storyId"];
					id?: parameters["rowFilter.storyviews.id"];
					user?: parameters["rowFilter.storyviews.user"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					storyId?: parameters["rowFilter.storyviews.storyId"];
					id?: parameters["rowFilter.storyviews.id"];
					user?: parameters["rowFilter.storyviews.user"];
				};
				body: {
					/** storyviews */
					storyviews?: definitions["storyviews"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	"/users": {
		get: {
			parameters: {
				query: {
					username?: parameters["rowFilter.users.username"];
					/** Name */
					name?: parameters["rowFilter.users.name"];
					/** Bio */
					bio?: parameters["rowFilter.users.bio"];
					/** Profile Picture */
					profilePic?: parameters["rowFilter.users.profilePic"];
					email?: parameters["rowFilter.users.email"];
					/** Notification Token for FCM */
					notificationToken?: parameters["rowFilter.users.notificationToken"];
					/** Filtering Columns */
					select?: parameters["select"];
					/** Ordering */
					order?: parameters["order"];
					/** Limiting and Pagination */
					offset?: parameters["offset"];
					/** Limiting and Pagination */
					limit?: parameters["limit"];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters["range"];
					/** Limiting and Pagination */
					"Range-Unit"?: parameters["rangeUnit"];
					/** Preference */
					Prefer?: parameters["preferCount"];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions["users"][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** users */
					users?: definitions["users"];
				};
				query: {
					/** Filtering Columns */
					select?: parameters["select"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					username?: parameters["rowFilter.users.username"];
					/** Name */
					name?: parameters["rowFilter.users.name"];
					/** Bio */
					bio?: parameters["rowFilter.users.bio"];
					/** Profile Picture */
					profilePic?: parameters["rowFilter.users.profilePic"];
					email?: parameters["rowFilter.users.email"];
					/** Notification Token for FCM */
					notificationToken?: parameters["rowFilter.users.notificationToken"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					username?: parameters["rowFilter.users.username"];
					/** Name */
					name?: parameters["rowFilter.users.name"];
					/** Bio */
					bio?: parameters["rowFilter.users.bio"];
					/** Profile Picture */
					profilePic?: parameters["rowFilter.users.profilePic"];
					email?: parameters["rowFilter.users.email"];
					/** Notification Token for FCM */
					notificationToken?: parameters["rowFilter.users.notificationToken"];
				};
				body: {
					/** users */
					users?: definitions["users"];
				};
				header: {
					/** Preference */
					Prefer?: parameters["preferReturn"];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
}

export interface definitions {
	comments: {
		/**
		 * Format: integer
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 */
		id: number;
		/**
		 * Format: integer
		 * @description Note:
		 * This is a Foreign Key to `posts.postId`.<fk table='posts' column='postId'/>
		 */
		postId: number;
		/**
		 * Format: text
		 * @description Note:
		 * This is a Foreign Key to `users.username`.<fk table='users' column='username'/>
		 */
		user: string;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		postedAt: string;
		/** Format: text */
		comment: string;
		/**
		 * Format: integer
		 * @description Note:
		 * This is a Foreign Key to `comments.id`.<fk table='comments' column='id'/>
		 */
		parentId?: number;
	};
	followers: {
		/**
		 * Format: integer
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 */
		id: number;
		/**
		 * Format: text
		 * @description Note:
		 * This is a Foreign Key to `users.username`.<fk table='users' column='username'/>
		 */
		follower: string;
		/**
		 * Format: text
		 * @description Note:
		 * This is a Foreign Key to `users.username`.<fk table='users' column='username'/>
		 */
		following: string;
	};
	likes: {
		/**
		 * Format: integer
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 */
		id: number;
		/**
		 * Format: integer
		 * @description Note:
		 * This is a Foreign Key to `posts.postId`.<fk table='posts' column='postId'/>
		 */
		postId: number;
		/**
		 * Format: text
		 * @description Note:
		 * This is a Foreign Key to `users.username`.<fk table='users' column='username'/>
		 */
		user: string;
	};
	messages: {
		/**
		 * Format: integer
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 */
		messageId: number;
		/**
		 * Format: character varying
		 * @description TEXT, IMAGE, POST, STORY, STORYREPLY
		 * @default TEXT
		 */
		message_type: string;
		/** Format: text */
		text?: string;
		/**
		 * Format: integer
		 * @description Note:
		 * This is a Foreign Key to `posts.postId`.<fk table='posts' column='postId'/>
		 */
		postId?: number;
		/** Format: text */
		imageUrl?: string;
		/**
		 * Format: text
		 * @description Note:
		 * This is a Foreign Key to `users.username`.<fk table='users' column='username'/>
		 */
		sender: string;
		/**
		 * Format: text
		 * @description Note:
		 * This is a Foreign Key to `users.username`.<fk table='users' column='username'/>
		 */
		receiver: string;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		received_at: string;
		/**
		 * Format: integer
		 * @description Note:
		 * This is a Foreign Key to `stories.id`.<fk table='stories' column='id'/>
		 */
		storyId?: number;
	};
	/** @description Notifications */
	notifications: {
		/**
		 * Format: bigint
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 */
		id: number;
		/**
		 * Format: text
		 * @description Type of Notification: COMMENT, LIKE, FOLLOW
		 */
		type: string;
		/**
		 * Format: timestamp with time zone
		 * @description Created On
		 * @default now()
		 */
		createdOn: string;
		/**
		 * Format: text
		 * @description User
		 *
		 * Note:
		 * This is a Foreign Key to `users.username`.<fk table='users' column='username'/>
		 */
		toUser: string;
		/**
		 * Format: text
		 * @description Note:
		 * This is a Foreign Key to `users.username`.<fk table='users' column='username'/>
		 */
		byUser: string;
		/**
		 * Format: integer
		 * @description Post
		 *
		 * Note:
		 * This is a Foreign Key to `posts.postId`.<fk table='posts' column='postId'/>
		 */
		post?: number;
		/**
		 * Format: bigint
		 * @description Note:
		 * This is a Foreign Key to `comments.id`.<fk table='comments' column='id'/>
		 */
		comment?: number;
	};
	posts: {
		/**
		 * Format: integer
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 */
		postId: number;
		/** Format: text */
		imageUrl: string;
		/**
		 * Format: text
		 * @description Note:
		 * This is a Foreign Key to `users.username`.<fk table='users' column='username'/>
		 */
		user: string;
		/** Format: text */
		caption?: string;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		postedAt: string;
	};
	/** @description Stories */
	stories: {
		/**
		 * Format: bigint
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 */
		id: number;
		/**
		 * Format: text
		 * @description Story Image URL
		 */
		imageUrl: string;
		/**
		 * Format: text
		 * @description User
		 *
		 * Note:
		 * This is a Foreign Key to `users.username`.<fk table='users' column='username'/>
		 */
		user: string;
		/**
		 * Format: timestamp with time zone
		 * @description Posted At
		 * @default now()
		 */
		postedAt: string;
	};
	storyviews: {
		/**
		 * Format: bigint
		 * @description Note:
		 * This is a Foreign Key to `stories.id`.<fk table='stories' column='id'/>
		 */
		storyId: number;
		/**
		 * Format: bigint
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 */
		id: number;
		/**
		 * Format: text
		 * @description Note:
		 * This is a Foreign Key to `users.username`.<fk table='users' column='username'/>
		 */
		user: string;
	};
	/** @description Users */
	users: {
		/**
		 * Format: text
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 */
		username: string;
		/**
		 * Format: text
		 * @description Name
		 */
		name: string;
		/**
		 * Format: text
		 * @description Bio
		 */
		bio?: string;
		/**
		 * Format: text
		 * @description Profile Picture
		 */
		profilePic?: string;
		/** Format: text */
		email: string;
		/**
		 * Format: text
		 * @description Notification Token for FCM
		 */
		notificationToken?: string;
	};
}

export interface parameters {
	/** @description Preference */
	preferParams: "params=single-object";
	/** @description Preference */
	preferReturn: "return=representation" | "return=minimal" | "return=none";
	/** @description Preference */
	preferCount: "count=none";
	/** @description Filtering Columns */
	select: string;
	/** @description On Conflict */
	on_conflict: string;
	/** @description Ordering */
	order: string;
	/** @description Limiting and Pagination */
	range: string;
	/**
	 * @description Limiting and Pagination
	 * @default items
	 */
	rangeUnit: string;
	/** @description Limiting and Pagination */
	offset: string;
	/** @description Limiting and Pagination */
	limit: string;
	/** @description comments */
	"body.comments": definitions["comments"];
	/** Format: integer */
	"rowFilter.comments.id": string;
	/** Format: integer */
	"rowFilter.comments.postId": string;
	/** Format: text */
	"rowFilter.comments.user": string;
	/** Format: timestamp with time zone */
	"rowFilter.comments.postedAt": string;
	/** Format: text */
	"rowFilter.comments.comment": string;
	/** Format: integer */
	"rowFilter.comments.parentId": string;
	/** @description followers */
	"body.followers": definitions["followers"];
	/** Format: integer */
	"rowFilter.followers.id": string;
	/** Format: text */
	"rowFilter.followers.follower": string;
	/** Format: text */
	"rowFilter.followers.following": string;
	/** @description likes */
	"body.likes": definitions["likes"];
	/** Format: integer */
	"rowFilter.likes.id": string;
	/** Format: integer */
	"rowFilter.likes.postId": string;
	/** Format: text */
	"rowFilter.likes.user": string;
	/** @description messages */
	"body.messages": definitions["messages"];
	/** Format: integer */
	"rowFilter.messages.messageId": string;
	/**
	 * Format: character varying
	 * @description TEXT, IMAGE, POST, STORY, STORYREPLY
	 */
	"rowFilter.messages.message_type": string;
	/** Format: text */
	"rowFilter.messages.text": string;
	/** Format: integer */
	"rowFilter.messages.postId": string;
	/** Format: text */
	"rowFilter.messages.imageUrl": string;
	/** Format: text */
	"rowFilter.messages.sender": string;
	/** Format: text */
	"rowFilter.messages.receiver": string;
	/** Format: timestamp with time zone */
	"rowFilter.messages.received_at": string;
	/** Format: integer */
	"rowFilter.messages.storyId": string;
	/** @description notifications */
	"body.notifications": definitions["notifications"];
	/** Format: bigint */
	"rowFilter.notifications.id": string;
	/**
	 * Format: text
	 * @description Type of Notification: COMMENT, LIKE, FOLLOW
	 */
	"rowFilter.notifications.type": string;
	/**
	 * Format: timestamp with time zone
	 * @description Created On
	 */
	"rowFilter.notifications.createdOn": string;
	/**
	 * Format: text
	 * @description User
	 */
	"rowFilter.notifications.toUser": string;
	/** Format: text */
	"rowFilter.notifications.byUser": string;
	/**
	 * Format: integer
	 * @description Post
	 */
	"rowFilter.notifications.post": string;
	/** Format: bigint */
	"rowFilter.notifications.comment": string;
	/** @description posts */
	"body.posts": definitions["posts"];
	/** Format: integer */
	"rowFilter.posts.postId": string;
	/** Format: text */
	"rowFilter.posts.imageUrl": string;
	/** Format: text */
	"rowFilter.posts.user": string;
	/** Format: text */
	"rowFilter.posts.caption": string;
	/** Format: timestamp with time zone */
	"rowFilter.posts.postedAt": string;
	/** @description stories */
	"body.stories": definitions["stories"];
	/** Format: bigint */
	"rowFilter.stories.id": string;
	/**
	 * Format: text
	 * @description Story Image URL
	 */
	"rowFilter.stories.imageUrl": string;
	/**
	 * Format: text
	 * @description User
	 */
	"rowFilter.stories.user": string;
	/**
	 * Format: timestamp with time zone
	 * @description Posted At
	 */
	"rowFilter.stories.postedAt": string;
	/** @description storyviews */
	"body.storyviews": definitions["storyviews"];
	/** Format: bigint */
	"rowFilter.storyviews.storyId": string;
	/** Format: bigint */
	"rowFilter.storyviews.id": string;
	/** Format: text */
	"rowFilter.storyviews.user": string;
	/** @description users */
	"body.users": definitions["users"];
	/** Format: text */
	"rowFilter.users.username": string;
	/**
	 * Format: text
	 * @description Name
	 */
	"rowFilter.users.name": string;
	/**
	 * Format: text
	 * @description Bio
	 */
	"rowFilter.users.bio": string;
	/**
	 * Format: text
	 * @description Profile Picture
	 */
	"rowFilter.users.profilePic": string;
	/** Format: text */
	"rowFilter.users.email": string;
	/**
	 * Format: text
	 * @description Notification Token for FCM
	 */
	"rowFilter.users.notificationToken": string;
}

export interface operations {}

export interface external {}
